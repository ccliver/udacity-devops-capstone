Parameters:
  JenkinsAllowedIP:
    Type: String
    Description: The CIDR that will be granted SSH access to the Jenkins instance

  InstanceType:
    Type: String
    Description: The EC2 instance type

  AMI:
    Type: String
    Description: Jenkins instance AMI

Resources:

  #
  # VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: false

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  InternetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTablePublic

  #
  # Jenkins
  #
  JenkinsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Jenkins instance security group
      GroupName: jenkins-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Join ['', [!Ref JenkinsAllowedIP, '/32']]
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Join ['', [!Ref JenkinsAllowedIP, '/32']]

  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  JenkinsRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'eks:*'
              - 'ecr:*'
            Resource: '*'
      Roles:
      - !Ref JenkinsRole

  JenkinsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref JenkinsRole

  Jenkins:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      KeyName: jenkins-key
      InstanceType: t3.small
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: JenkinsSG
          SubnetId: !Ref PublicSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      UserData: !Base64 |
        #!/bin/bash
        apt-get update
        apt install -y default-jdk awscli docker.io make
        wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
        echo 'deb https://pkg.jenkins.io/debian-stable binary/' > /etc/apt/sources.list.d/jenkins.list
        apt-get update
        apt-get install -y jenkins tidy
        systemctl start jenkins
        systemctl enable jenkins
        sudo usermod -G docker ubuntu
        sudo usermod -G docker jenkins
        systemctl restart jenkins
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.9/2020-08-04/bin/linux/amd64/kubectl
        chmod +x kubectl
        mv kubectl /usr/local/bin
      Tags:
        - Key: Name
          Value: jenkins

  ContainerRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: udacity-devops-capstone
      ImageScanningConfiguration: 
        scanOnPush: 'true'

Outputs:
  JenkinsIP:
    Value: !GetAtt Jenkins.PublicIp